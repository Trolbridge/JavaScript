* Section 1 Intro & Getting Started

** Why Take This Course

*** Learn modern JS from start to finish
*** Learn to build without framworks
*** Get better at building *with* frameworks by understanding vanilla JS
*** Learn DOM without JQuery
*** Learn sructure apps and design patterns

** Some Topics Covered

*** Basics & Fundamentals
*** DOM Manipulation & UI Events (NO jQuery!!!)
*** OOP - ES5 Prototypes + ES6 Classes
*** Async JS -- Ajax, Fetch, Promises, Async/Await
*
** Error Handling, Regular Expressions, LocalStorage




*** Programmning Scope, Arrow Functions, Map Set, Iterators
*** JavaScript Patterns
*** Around 10 Projects

** Included Projects

*** Task List (DOM & LocalStorage)
*** Loan calculator
*** Number Guessing game
*** Book Manager (OPP Intro)
*** EasyHTTP library (Fetch API)
*** Github Finder (Github API)
*** Weather App (weatherunderground API)
*** Tracalorie (Module Pattern)
*** CRUD App Wtih ES6 Modules (Webpack)

** Mini Projects

*** Chuck Norris Joke Generator
*** Profile Scroller (iterators)
*** State Pattern Interface

** Other Skills You May Pick Up

*** HTML / CSS
*** Bootstrap 4
*** Materialize CSS
*** Skeleton CSS
*** HTTP / REST APIS
*** Webpack / Babel

** Project Files

*** Every lecture contains the project files for that video
*** Modular learning sections will just be an index.html & app.js file
*** Projects have incremental files

** If you get stuck

*** Search
*** post Q&A
*** include the code
*** email code

** Updates

*** ESNext features

** Code Style

*** Best way to learn
*** Practices get better
*** Everyone programs differently

* Section 2: JavaScript Language Fundamentals

** Section Intro & File Setup
*** js_sandbox folder
**** index.html

#+begin_src html :results output

  <!doctype html>
  <html lang="en">
      <head>
          <meta charset="UTF-8"/>
          <title>JavaScript Sandbox: Section 2</title>
          <link rel="stylesheet" href="styles.css">
          <style>
           body {
               background-color: linen;
           }
          </style>
      </head>
      <body>
        <h1>JavaScript Sandbox: Section 2</h1>
        <script src="app.js"></script>
        <script>
         document.querySelector('h1').style.color = 'blue';
         console.clear();      // Clear console
         console.time('go')
         console.log(document);
         console.log('hello');
         console.log(123);
         console.log('hello');
         var greeting = 'hi';
         console.log(greeting);
         console.log([1,2,3,4]);   // Arrays
         console.log({a:1,b:2});   // Object Literal
         console.table({a:1,b:2}); // Tables
         console.error('This is an error');  // Errors
         console.warn('This is an warning');  // Warnings

         console.timeEnd('go');
        </script>
      </body>
  </html>

#+end_src

**** app.js

#+begin_src js :results output

// alert("hello");
console.log(document);
document.querySelector('h1').style.color = 'red';
var h1 = document.querySelector('h1');
h1.style.color = 'blue';
+begin_src js :results output
	
#+end_src

#+RESULTS:

**** styles.css

#+begin_src css :results output

  h1 {
      color: blue;
      }

#+end_src

** Variables - var, let & const
- var has always been around
- let & const introduced in 2015 - ES6

*** Variable name Rules:
- Can use: letters, numbers, _, $
- Can not start with a number
**** Variable name examples:

#+begin_src js :results output

  // No !!!
  var 1name = 'john';

#+end_src

#+begin_src js :results output

  // JQuery...
  var $name = 'den';
  console.log($name);

  // private variables...
  var _name = 'denny';
  console.log(_name);

#+end_src

#+RESULTS:
: den
: denny

*** Var Example

#+begin_src js :results output

  var name ='John Doe';
  console.log(name);
  name = 'Dennis Mitchell';     //  Reassignment (Dynamic)
  console.log(name);

  // Initializing a variable
  var greeting;
  console.log(greeting);

#+end_src

#+RESULTS:
: John Doe
: Dennis Mitchell
: undefined

*** const

Use const type whenever possble, to make code more secure and readable

#+begin_src js :results output

  // Object
  const Person = {
      name: "Dennis",
      age: 53
      }

  console.log(Person);
  console.log(Person.name);
  console.log(typeof(Person));

  // Arrays
  const numbers = [1,2,3,4,5];
  numbers.push(6);
  
  console.log(numbers);
  console.log(numbers[4]);



#+end_src

#+RESULTS:
: { name: 'Dennis', age: 53 }
: Dennis
: object
: [ 1, 2, 3, 4, 5, 6 ]
: 5

** Data Types in JavaScript 

*** Primitive Data Types:

- Stored directly in the location the variable accesses
- Stored on the stack

- String
- Number - (int and float)
- Boolean
- Null
- Undefined
- Symbols (ES6)

*** Reference Data Types:

- Accessed by refenrence
- Objects that are stored on the heap
- A pointer to a location in memory

- Arrays
- Object Literals
- Functions
- Dates
- Anything Else...

*** Dynamically Typed Language

- Types are associated with values not variables
- Same variable can hold multple types
- Do not need to specify types
- Most other languages are statically typed (java, c#, c++)
- There are supersets of JS and addons to allow static typing (TypeScript, Flow)

**** Reference Examples:

#+begin_src js :results output

  // Array
  const hobbies = ['movies', 'music'];
  console.log(typeof hobbies);

  // Is Array type tip
  if (hobbies.constructor.name == 'Array') {
      console.log('hobbies is an Array');
  }

  // Check if Array

  val = Array.isArray(hobbies);


  // Objects literal
  const address = {
      city: 'Miami',
      state: 'Florida'
  }

  const today = new Date();

  console.log(today);
  console.log(typeof today);

#+end_src

#+RESULTS:
: object
: hobbies is an Array
: 2021-11-20T17:17:38.759Z
: object

** Type Conversion

*** toString, to number:
#+begin_src js :results output

  // toString()
  val = (5).toString();
  val = (true).toString();
  val = String(5);
  console.log(typeof val);

  // to Number
  val = Number('5');
  val = parseInt('100');
  val = parseFloat('100');
  console.log(val.toFixed(2));

#+end_src

#+RESULTS:
: string
: 100.00

** Numbers & The Math Object 

#+begin_src js :results output
  

  val = Math.floor(Math.random() * 20 + 1);
  console.log(val);
  val = Math.



#+end_src

#+RESULTS:

** String Methods & Concatenation

** Template Literals 

- Should be compatible with all modern borrowers.

#+begin_src js :results output

  const name = 'John';
  const age = 30;
  const job = 'Web Developer';
  const city = 'Miami';

  let html;
        
  function hello() {
      return 'Hello!!!!';
  }

  html = `
      <ul>
          <li>Name: ${name}</li>
          <li>Age: ${age}</li>
          <li>Job: ${job}</li>
          <li>City: ${city}</li>
          <li>${2 + 2}</li>
          <li>${hello()}</li>
          <li>${hello}</li>
          <li>${age > 29 ? 'Over 30' : 'Under 30'}</li>
      </ul> 
      `;

  document.body.innerHTML = html;

#+end_src

#+RESULTS:

** Arrays

#+begin_src js :results output

  // Create some arrays
const numbers = [43,56,33,23,44,36,5];
const numbers2 = new Array(22,45,33,76,54);
const fruit = ['Apple', 'Banana', 'Orange', 'Pear'];
const mixed = [22, 'Hello', true, undefined, null, {a:1, b:1}, new Date()];

let val;

// Get array length
val = numbers.length;
// Check if is array
val = Array.isArray(numbers);
// Get single value
val = numbers[3];
val = numbers[0];
// Insert into array
numbers[2] = 100;
// Find index of value
val = numbers.indexOf(36);

// MUTATING ARRAYS
// // Add on to end
// numbers.push(250);
// // Add on to front
// numbers.unshift(120);
// // Take off from end
// numbers.pop();
// // Take off from front
// numbers.shift();
// // Splice values
// numbers.splice(1,3);
// // Reverse
// numbers.reverse();

// Concatenate array
val = numbers.concat(numbers2);

// Sorting arrays
val = fruit.sort();
// val = numbers.sort();

// // Use the "compare function"
// val = numbers.sort(function(x, y){
//   return x - y;
// });

// // Reverse sort
// val = numbers.sort(function(x, y){
//   return y - x;
// });

// Find
function over50(num){
  return num > 50;
}

val = numbers.find(over50);

console.log(numbers);
console.log(val);


#+end_src

#+RESULTS:
: [
:   43, 56, 100, 23,
:   44, 36,   5
: ]
: 56

** Object Literals

#+begin_src js :results output

  const person = {
  firstName: 'Steve',
  lastName: 'Smith',
  age: 36,
  email: 'steve@aol.com',
  hobbies: ['music', 'sports'],
  address: {
    city: 'Miami',
    state: 'FL'
  },
  getBirthYear: function(){
    return 2017 - this.age;
  }
}

let val;

val = person;
// Get specific value
val = person.firstName;
val = person['lastName'];
val = person.age;
val = person.hobbies[1];
val = person.address.state;
val = person.address['city'];
val = person.getBirthYear();

console.log(val);

const people = [
  {name: 'John', age: 30},
  {name: 'Mike', age: 23},
  {name: 'Nancy', age: 40}
];

for(let i = 0; i < people.length; i++){
  console.log(people[i].name);
}
#+end_src

** Dates & Times 

#+begin_src js :results output

    let val;

  const today = new Date();
  let birthday = new Date('9-10-1981 11:25:00');
  birthday = new Date('September 10 1981');
  birthday = new Date('9/10/1981');

  val = today.getMonth();
  val = today.getDate();
  val = today.getDay();
  val = today.getFullYear();
  val = today.getHours();
  val = today.getMinutes();
  val = today.getSeconds();
  val = today.getMilliseconds();
  val = today.getTime();

  birthday.setMonth(2);
  birthday.setDate(12);
  birthday.setFullYear(1985);
  birthday.setHours(3);
  birthday.setMinutes(30);
  birthday.setSeconds(25);
  console.log(birthday);
  
#+end_src

** If Statements & Comparison Operators 

#+begin_src js :results output

    // if(something){
  //   do something
  // } else {
  //   do something else
  // }

  const id = 100;

  // // EQUAL TO
  // if(id == 100){
  //   console.log('CORRECT');
  // } else {
  //   console.log('INCORRECT');
  // }

  // // NOT EQUAL TO
  // if(id != 101){
  //   console.log('CORRECT');
  // } else {
  //   console.log('INCORRECT');
  // }

  // // EQUAL TO VALUE & TYPE
  // if(id === 100){
  //   console.log('CORRECT');
  // } else {
  //   console.log('INCORRECT');
  // }

  // // EQUAL TO VALUE & TYPE
  // if(id !== 100){
  //   console.log('CORRECT');
  // } else {
  //   console.log('INCORRECT');
  // }

  // Test if undefined
  // if(typeof id !== 'undefined'){
  //   console.log(`The ID is ${id}`);
  // } else {
  //   console.log('NO ID');
  // }

  // GREATER OR LESS THAN
  // if(id <= 100){
  //   console.log('CORRECT');
  // } else {
  //   console.log('INCORRECT');
  // }

  // IF ELSE

  const color = 'yellow';

  // if(color === 'red'){
  //   console.log('Color is red');
  // } else if(color === 'blue'){
  //   console.log('Color is blue');
  // } else {
  //   console.log('Color is not red or blue');
  // }

  // LOGICAL OPERATORS

  const name = 'Steve';
  const age = 70;

  // AND &&
  if(age > 0 && age < 12){
    console.log(`${name} is a child`);
  } else if(age >= 13 && age <= 19){
    console.log(`${name} is a teenager`);
  } else {
    console.log(`${name} is an adult`);
  }

  // OR ||
  if(age < 16 || age > 65){
    console.log(`${name} can not run in race`);
  } else {
    console.log(`${name} is registered for the race`);
  }

  // TERNARY OPERATOR
  console.log(id === 100 ? 'CORRECT' : 'INCORRECT');

  // WITHOUT BRACES
  if(id === 100)
    console.log('CORRECT');
  else
    console.log('INCORRECT');

  if(id === 100)
    console.log('CORRECT');
  else
    console.log('INCORRECT');
  
#+end_src

** Switches 

#+begin_src js :results output

    const color = 'yellow';

  switch(color){
    case 'red':
      console.log('Color is red');
      break;
    case 'blue':
      console.log('Color is blue');
      break;
    default:
      console.log('Color is not red or blue');
      break;
  }

  let day;

  switch(new Date().getDay()){
    case 0:
      day = 'Sunday';
      break;
    case 1:
      day = 'Monday';
      break;
    case 2:
      day = 'Tuesday';
      break;
    case 3:
      day = 'Wednesday';
      break;
    case 4:
      day = 'Thursday';
      break;
    case 5:
      day = 'Friday';
      break;
    case 6:
      day = 'Saturday';
      break;
  }

  console.log(`Today is ${day}`);
  
#+end_src

** Function Declarations & Expressions

#+begin_src js :results output

    // FUNCTION DECLARATIONS

  function greet(firstName = 'John', lastName = 'Doe'){
    // if(typeof firstName === 'undefined'){firstName = 'John'}
    // if(typeof lastName === 'undefined'){lastName = 'Doe'}
    //console.log('Hello');
    return 'Hello ' + firstName + ' ' + lastName;
  }

  // console.log(greet());

  // FUNCTION EXPRESIONS

  const square = function(x = 3){
    return x*x;
  };

  // console.log(square());

  // IMMIDIATLEY INVOKABLE FUNCTION EXPRESSIONS - IIFEs

  // (function(){
  //   console.log('IIFE Ran..');
  // })();

  // (function(name){
  //   console.log('Hello '+ name);
  // })('Brad');

  // PROPERTY METHODS

  const todo = {
    add: function(){
      console.log('Add todo..');
    },
    edit: function(id){
      console.log(`Edit todo ${id}`);
    }
  }

  todo.delete = function(){
    console.log('Delete todo...');
  }

  todo.add();
  todo.edit(22);
  todo.delete();
  
#+end_src

** General Loops

#+begin_src js :results output

    // FOR LOOP

  // for(let i = 0; i < 10; i++){
  //   if(i === 2){
  //     console.log('2 is my favorite number');
  //     continue;
  //   }

  //   if(i === 5){
  //     console.log('Stop the loop');
  //     break;
  //   }

  //   console.log('Number '+ i);
  // }

  // WHILE LOOP

  // let i = 0;

  // while(i < 10){
  //   console.log('Number ' + i);
  //   i++;
  // }

  // DO WHILE

  // let i = 100;

  // do {
  //   console.log('Number ' + i);
  //   i++;
  // }

  // while(i < 10);

  // LOOP THROUGH ARRAY
  const cars = ['Ford', 'Chevy', 'Honda', 'Toyota'];

  // for(let i = 0; i < cars.length; i++){
  //   console.log(cars[i]);
  // }

  // FOREACH
  // cars.forEach(function(car, index, array){
  //   console.log(`${index} : ${car}`);
  //   console.log(array);
  // });

  // MAP
  // const users  = [
  //   {id: 1, name:'John'},
  //   {id: 2, name: 'Sara'},
  //   {id: 3, name: 'Karen'},
  //   {id: 4, name: 'Steve'}
  // ];

  // const ids = users.map(function(user){
  //   return user.id;
  // });

  // console.log(ids);


  // FOR IN LOOP
  const user = {
    firstName: 'John', 
    lastName: 'Doe',
    age: 40
  }

  for(let x in user){
    console.log(`${x} : ${user[x]}`);
  }
  
#+end_src

** A Look at the Window Object

#+begin_src js :results output

    // WINDOW METHODS / OBJECTS / PROPERTIES

  // Alert
  //alert('Hello World');

  // Prompt
  // const input = prompt();
  // alert(input);

  // Confirm
  // if(confirm('Are you sure')){
  //   console.log('YES');
  // } else {
  //   console.log('NO');
  // }

  let val;

  // Outter height and width
  val = window.outerHeight;
  val = window.outerWidth;

  // Inner height and width
  val = window.innerHeight;
  val = window.innerWidth;

  // Scroll points
  val = window.scrollY;
  val = window.scrollX;

  // Location Object
  val = window.location;
  val = window.location.hostname;
  val = window.location.port;
  val = window.location.href;
  val = window.location.search;

  // Redirect
  //window.location.href = 'http://google.com';
  //Reload
  //window.location.reload();

  // History Object

  // window.history.go(-2);
  // val = window.history.length;

  // Navigator Object
  val = window.navigator;
  val = window.navigator.appName;
  val = window.navigator.appVersion;
  val = window.navigator.userAgent;
  val = window.navigator.platform;
  val = window.navigator.vendor;
  val = window.navigator.language;



  console.log(val);
  
#+end_src

** Block Scope with let & const

#+begin_src js :results output

    // Global Scope
  var a = 1;
  let b = 2;
  const c = 3;

  // function test() {
  //   var a = 4;
  //   let b = 5;
  //   const c = 6;
  //   console.log('Function Scope: ', a, b, c);
  // }

  // test();

  // if(true) {
  //   // Block Scope
  //   var a = 4;
  //   let b = 5;
  //   const c = 6;
  //   console.log('If Scope: ', a, b, c);
  // }

  // for(var a = 0; a < 10; a++) {
  //   console.log(`Loop: ${a}`);
  // }

  console.log('Global Scope: ', a, b, c);
  
#+end_src

* Section 3: DOM Manipulation & Events 

** What is the DOM?

** Examining the DOM Object

#+begin_src js :results output

    let val;

  val = document;
  val = document.all;
  val = document.all[2];
  val = document.all.length;
  val = document.head;
  val = document.body;
  val = document.doctype;
  val = document.domain;
  val = document.URL;
  val = document.characterSet;
  val = document.contentType;

  val = document.forms;
  val = document.forms[0];
  val = document.forms[0].id;
  val = document.forms[0].method;
  val = document.forms[0].action;

  val = document.links;
  val = document.links[0];
  val = document.links[0].id;
  val = document.links[0].className;
  val = document.links[0].classList[0];

  val = document.images;

  val = document.scripts;
  val = document.scripts[2].getAttribute('src');

  let scripts = document.scripts;

  let scriptsArr = Array.from(scripts);

  scriptsArr.forEach(function(script) {
    console.log(script.getAttribute('src'));
  });

  console.log(val);
  
#+end_src

** DOM Selectors for single elements

#+begin_src js :results output

  // document.getElementById()

// console.log(document.getElementById('task-title'));

// // Get things from the element
// console.log(document.getElementById('task-title').id);
// console.log(document.getElementById('task-title').className);

// const taskTitle = document.getElementById('task-title');

// // Change styling
// taskTitle.style.background = '#333';
// taskTitle.style.color = '#fff';
// taskTitle.style.padding = '5px';
// // taskTitle.style.display = 'none';

// // Change content
// taskTitle.textContent = 'Task List';
// taskTitle.innerText = 'My Tasks';
// taskTitle.innerHTML = '<span style="color:red">Task List</span>';

// document.querySelector()

console.log(document.querySelector('#task-title'));
console.log(document.querySelector('.card-title'));
console.log(document.querySelector('h5'));

document.querySelector('li').style.color = 'red';
document.querySelector('ul li').style.color = 'blue';

document.querySelector('li:last-child').style.color = 'red';
document.querySelector('li:nth-child(3)').style.color = 'yellow';
document.querySelector('li:nth-child(4)').textContent = 'Hello World';
document.querySelector('li:nth-child(odd)').style.background = '#ccc';
document.querySelector('li:nth-child(even)').style.background = '#f4f4f4';

#+end_src

** DOM Selectors for multiple elements

*** document.querySelectorAll();

#+begin_src js :results output

  // document.getElementsByClassName

  // const items = document.getElementsByClassName('collection-item');
  // console.log(items);
  // console.log(items[0]);
  // items[0].style.color = 'red';
  // items[3].textContent = 'Hello';

  // const listItems = document.querySelector('ul').getElementsByClassName('collection-item');

  // console.log(listItems);

  // document.getElementsByTagName
  // let lis = document.getElementsByTagName('li');
  // console.log(lis);
  // console.log(lis[0]);
  // lis[0].style.color = 'red';
  // lis[3].textContent = 'Hello';

  // // Conver HTML Collection into array
  // lis = Array.from(lis);

  // lis.reverse();

  // lis.forEach(function(li, index){
  //   console.log(li.className);
  //   li.textContent = `${index}: Hello`;
  // });

  // console.log(lis);

  // document.querySelectorAll
  const items = document.querySelectorAll('ul.collection li.collection-item');

  items.forEach(function(item, index){
      item.textContent = `${index}: Hello`;
  });

  const liOdd = document.querySelectorAll('li:nth-child(odd)');
  const liEven = document.querySelectorAll('li:nth-child(even)');

  liOdd.forEach(function(li, index){
    li.style.background = '#ccc';
  });

  for(let i = 0; i < liEven.length; i++){
    liEven[i].style.background = '#f4f4f4';
  }


  console.log(items);

#+end_src

